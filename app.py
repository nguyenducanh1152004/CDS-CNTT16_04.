from flask import Flask, render_template, request, jsonify, redirect, url_for, flash
from flask_login import LoginManager, UserMixin, login_user, logout_user, login_required, current_user
from flask_mail import Mail, Message
import sqlite3
import csv
import os
from datetime import datetime
import hashlib

app = Flask(__name__)
app.config['SECRET_KEY'] = 'medical-appointment-secret-key-2024'

# ==================== C·∫§U H√åNH EMAIL ====================
app.config['MAIL_SERVER'] = 'smtp.gmail.com'
app.config['MAIL_PORT'] = 587
app.config['MAIL_USE_TLS'] = True
app.config['MAIL_USERNAME'] = 'hoangcanh1233214@gmail.com'
app.config['MAIL_PASSWORD'] = 'dihf fjgz rsyp jgwj'
app.config['MAIL_DEFAULT_SENDER'] = 'hoangcanh1233214@gmail.com'

mail = Mail(app)

# Flask-Login Configuration
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login'
login_manager.login_message = 'Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ truy c·∫≠p trang n√†y.'

class User(UserMixin):
    def __init__(self, id, username, role, name=None, email=None):
        self.id = id
        self.username = username
        self.role = role
        self.name = name
        self.email = email

@login_manager.user_loader
def load_user(user_id):
    conn = get_db_connection()
    user = conn.execute('SELECT * FROM users WHERE id = ?', (user_id,)).fetchone()
    conn.close()
    if user:
        return User(user['id'], user['username'], user['role'], user['name'], user['email'])
    return None

# Database configuration
DATABASE = 'medical_appointment.db'

def get_db_connection():
    conn = sqlite3.connect(DATABASE)
    conn.row_factory = sqlite3.Row
    return conn

def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

def init_db():
    """Initialize database with tables and import doctors from CSV"""
    conn = get_db_connection()
    
    # Create tables
    conn.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT UNIQUE NOT NULL,
            password TEXT NOT NULL,
            role TEXT NOT NULL,
            name TEXT,
            phone TEXT,
            email TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    conn.execute('''
        CREATE TABLE IF NOT EXISTS patients (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            phone TEXT NOT NULL,
            email TEXT,
            address TEXT,
            date_of_birth DATE,
            gender TEXT,
            user_id INTEGER,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')
    
    conn.execute('''
        CREATE TABLE IF NOT EXISTS doctors (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            specialization TEXT NOT NULL,
            phone TEXT NOT NULL,
            email TEXT,
            available_days TEXT,
            available_time TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    conn.execute('''
        CREATE TABLE IF NOT EXISTS appointments (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            patient_id INTEGER NOT NULL,
            doctor_id INTEGER NOT NULL,
            appointment_date DATE NOT NULL,
            appointment_time TEXT NOT NULL,
            status TEXT DEFAULT 'Scheduled',
            notes TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (patient_id) REFERENCES patients (id),
            FOREIGN KEY (doctor_id) REFERENCES doctors (id)
        )
    ''')
    
    # Insert default users v·ªõi password ƒë√£ hash
    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(*) FROM users WHERE role = 'admin'")
    if cursor.fetchone()[0] == 0:
        admin_password = hash_password('admin123')
        reception_password = hash_password('reception123')
        
        conn.execute("INSERT INTO users (username, password, role, name) VALUES (?, ?, ?, ?)", 
                    ('admin', admin_password, 'admin', 'Qu·∫£n Tr·ªã Vi√™n'))
        conn.execute("INSERT INTO users (username, password, role, name) VALUES (?, ?, ?, ?)", 
                    ('reception', reception_password, 'receptionist', 'Nh√¢n Vi√™n L·ªÖ T√¢n'))
        print("‚úÖ ƒê√£ th√™m user m·∫∑c ƒë·ªãnh: admin/admin123, reception/reception123")
    
    # Import doctors from CSV
    cursor.execute("SELECT COUNT(*) FROM doctors")
    doctor_count_before = cursor.fetchone()[0]
    
    if doctor_count_before == 0 and os.path.exists('doctors.csv'):
        print("üìÅ ƒêang import d·ªØ li·ªáu b√°c sƒ© t·ª´ doctors.csv...")
        imported_count = 0
        
        try:
            with open('doctors.csv', 'r', encoding='utf-8-sig') as file:
                csv_reader = csv.DictReader(file)
                
                for row_num, row in enumerate(csv_reader, 1):
                    try:
                        name = row.get('name', '').strip()
                        specialization = row.get('specialization', '').strip()
                        phone = row.get('phone', '').strip()
                        email = row.get('email', '').strip()
                        available_days = row.get('available_days', 'Th·ª© 2 - Th·ª© 6').strip()
                        available_time = row.get('available_time', '08:00-17:00').strip()
                        
                        if not name or not specialization or not phone:
                            print(f"‚ö†Ô∏è D√≤ng {row_num}: Thi·∫øu th√¥ng tin, b·ªè qua")
                            continue
                        
                        conn.execute('''
                            INSERT INTO doctors (name, specialization, phone, email, available_days, available_time)
                            VALUES (?, ?, ?, ?, ?, ?)
                        ''', (name, specialization, phone, email, available_days, available_time))
                        
                        imported_count += 1
                        print(f"‚úÖ ƒê√£ import b√°c sƒ© {row_num}: {name} - {specialization}")
                        
                    except Exception as e:
                        print(f"‚ùå L·ªói khi import d√≤ng {row_num}: {str(e)}")
            
            print(f"üéâ ƒê√£ import th√†nh c√¥ng {imported_count} b√°c sƒ© t·ª´ CSV")
            
        except Exception as e:
            print(f"‚ùå L·ªói khi ƒë·ªçc file CSV: {str(e)}")
    
    cursor.execute("SELECT COUNT(*) FROM doctors")
    doctor_count_after = cursor.fetchone()[0]
    print(f"üë®‚Äç‚öïÔ∏è T·ªïng s·ªë b√°c sƒ© trong database: {doctor_count_after}")
    
    conn.commit()
    conn.close()

def check_users():
    """Ki·ªÉm tra users trong database"""
    conn = get_db_connection()
    users = conn.execute('SELECT * FROM users').fetchall()
    print("=== USERS IN DATABASE ===")
    for user in users:
        print(f"ID: {user['id']}, Username: {user['username']}, Role: {user['role']}, Name: {user['name']}")
    conn.close()

# ==================== DECORATORS PH√ÇN QUY·ªÄN ====================

def admin_required(f):
    def decorated_function(*args, **kwargs):
        if not current_user.is_authenticated or current_user.role != 'admin':
            flash('B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p trang n√†y!', 'error')
            return redirect(url_for('home'))
        return f(*args, **kwargs)
    decorated_function.__name__ = f.__name__
    return decorated_function

def staff_required(f):
    def decorated_function(*args, **kwargs):
        if not current_user.is_authenticated or current_user.role not in ['admin', 'receptionist']:
            flash('B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p trang n√†y!', 'error')
            return redirect(url_for('home'))
        return f(*args, **kwargs)
    decorated_function.__name__ = f.__name__
    return decorated_function

def patient_required(f):
    def decorated_function(*args, **kwargs):
        if not current_user.is_authenticated or current_user.role != 'patient':
            flash('B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p trang n√†y!', 'error')
            return redirect(url_for('home'))
        return f(*args, **kwargs)
    decorated_function.__name__ = f.__name__
    return decorated_function

# ==================== ROUTES C√îNG KHAI ====================

@app.route('/')
def index():
    """Trang ch·ªß c√¥ng khai"""
    return render_template('public_index.html')

@app.route('/register', methods=['GET', 'POST'])
def register():
    """ƒêƒÉng k√Ω t√†i kho·∫£n b·ªánh nh√¢n"""
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        confirm_password = request.form['confirm_password']
        name = request.form['name']
        phone = request.form['phone']
        email = request.form['email']
        
        if password != confirm_password:
            flash('M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!', 'error')
            return render_template('register.html')
        
        if len(password) < 6:
            flash('M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±!', 'error')
            return render_template('register.html')
        
        conn = get_db_connection()
        try:
            # Ki·ªÉm tra username ƒë√£ t·ªìn t·∫°i ch∆∞a
            existing_user = conn.execute(
                'SELECT id FROM users WHERE username = ?', (username,)
            ).fetchone()
            
            if existing_user:
                flash('T√™n ƒëƒÉng nh·∫≠p ƒë√£ t·ªìn t·∫°i!', 'error')
                return render_template('register.html')
            
            # Th√™m user m·ªõi
            cursor = conn.cursor()
            hashed_password = hash_password(password)
            
            cursor.execute('''
                INSERT INTO users (username, password, role, name, phone, email)
                VALUES (?, ?, 'patient', ?, ?, ?)
            ''', (username, hashed_password, name, phone, email))
            
            user_id = cursor.lastrowid
            
            # Th√™m v√†o b·∫£ng patients
            cursor.execute('''
                INSERT INTO patients (name, phone, email, user_id)
                VALUES (?, ?, ?, ?)
            ''', (name, phone, email, user_id))
            
            conn.commit()
            conn.close()
            
            flash('ƒêƒÉng k√Ω t√†i kho·∫£n th√†nh c√¥ng! Vui l√≤ng ƒëƒÉng nh·∫≠p.', 'success')
            return redirect(url_for('login'))
            
        except Exception as e:
            conn.close()
            flash(f'L·ªói khi ƒëƒÉng k√Ω: {str(e)}', 'error')
    
    return render_template('register.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    """ƒêƒÉng nh·∫≠p cho c·∫£ admin v√† b·ªánh nh√¢n"""
    if current_user.is_authenticated:
        return redirect(url_for('home'))
        
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        hashed_password = hash_password(password)
        
        conn = get_db_connection()
        user = conn.execute(
            'SELECT * FROM users WHERE username = ? AND password = ?', 
            (username, hashed_password)
        ).fetchone()
        conn.close()
        
        if user:
            user_obj = User(user['id'], user['username'], user['role'], user['name'], user['email'])
            login_user(user_obj)
            flash(f'ƒêƒÉng nh·∫≠p th√†nh c√¥ng! Ch√†o m·ª´ng {user["name"]}', 'success')
            
            # Redirect d·ª±a tr√™n role
            if user['role'] == 'patient':
                return redirect(url_for('patient_dashboard'))
            else:
                return redirect(url_for('home'))
        else:
            flash('T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!', 'error')
    
    return render_template('login.html')

@app.route('/public/appointment', methods=['GET', 'POST'])
def public_appointment():
    """Trang ƒëƒÉng k√Ω l·ªãch h·∫πn c√¥ng khai (kh√¥ng c·∫ßn ƒëƒÉng nh·∫≠p)"""
    conn = get_db_connection()
    doctors = conn.execute('SELECT * FROM doctors ORDER BY name').fetchall()
    conn.close()
    
    if request.method == 'POST':
        patient_name = request.form['patient_name']
        patient_phone = request.form['patient_phone']
        patient_email = request.form['patient_email']
        doctor_id = request.form['doctor_id']
        appointment_date = request.form['appointment_date']
        appointment_time = request.form['appointment_time']
        notes = request.form.get('notes', '')
        
        print(f"üìù ƒêang x·ª≠ l√Ω ƒëƒÉng k√Ω l·ªãch h·∫πn:")
        print(f"   üë§ B·ªánh nh√¢n: {patient_name}")
        print(f"   üìû SƒêT: {patient_phone}")
        print(f"   üìß Email: {patient_email}")
        
        conn = get_db_connection()
        try:
            # Th√™m b·ªánh nh√¢n m·ªõi
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO patients (name, phone, email, created_at)
                VALUES (?, ?, ?, datetime('now'))
            ''', (patient_name, patient_phone, patient_email))
            patient_id = cursor.lastrowid
            
            print(f"‚úÖ ƒê√£ th√™m b·ªánh nh√¢n m·ªõi - ID: {patient_id}")
            
            # T·∫°o l·ªãch h·∫πn
            cursor.execute('''
                INSERT INTO appointments (patient_id, doctor_id, appointment_date, appointment_time, status, notes)
                VALUES (?, ?, ?, ?, 'Scheduled', ?)
            ''', (patient_id, doctor_id, appointment_date, appointment_time, notes))
            appointment_id = cursor.lastrowid
            
            # L·∫•y th√¥ng tin b√°c sƒ©
            doctor = conn.execute('SELECT name, specialization FROM doctors WHERE id = ?', (doctor_id,)).fetchone()
            
            print(f"üë®‚Äç‚öïÔ∏è Th√¥ng tin b√°c sƒ©: {doctor['name']} - {doctor['specialization']}")
            
            # G·ª≠i email x√°c nh·∫≠n TR∆Ø·ªöC KHI commit
            if patient_email:
                print(f"üìß ƒêang g·ª≠i email x√°c nh·∫≠n ƒë·∫øn: {patient_email}")
                email_sent = send_appointment_email(patient_email, patient_name, doctor['name'], 
                                                  appointment_date, appointment_time, appointment_id)
                if email_sent:
                    print(f"‚úÖ ƒê√£ g·ª≠i email x√°c nh·∫≠n th√†nh c√¥ng!")
                else:
                    print(f"‚ùå G·ª≠i email th·∫•t b·∫°i!")
            else:
                print("‚ö†Ô∏è Kh√¥ng c√≥ email ƒë·ªÉ g·ª≠i x√°c nh·∫≠n")
            
            conn.commit()
            print(f"‚úÖ ƒê√£ t·∫°o l·ªãch h·∫πn - ID: {appointment_id}")
            
            conn.close()
            
            flash('ƒêƒÉng k√Ω l·ªãch h·∫πn th√†nh c√¥ng! Ch√∫ng t√¥i ƒë√£ g·ª≠i email x√°c nh·∫≠n.', 'success')
            return redirect(url_for('public_appointment_success', appointment_id=appointment_id))
            
        except Exception as e:
            conn.rollback()
            conn.close()
            print(f"‚ùå L·ªói khi ƒëƒÉng k√Ω l·ªãch h·∫πn: {str(e)}")
            import traceback
            traceback.print_exc()
            flash(f'L·ªói khi ƒëƒÉng k√Ω l·ªãch h·∫πn: {str(e)}', 'error')
    
    return render_template('public_appointment.html', doctors=doctors, today=datetime.now().strftime('%Y-%m-%d'))

@app.route('/public/appointment/success/<int:appointment_id>')
def public_appointment_success(appointment_id):
    """Trang th√¥ng b√°o ƒëƒÉng k√Ω th√†nh c√¥ng"""
    conn = get_db_connection()
    appointment = conn.execute('''
        SELECT a.*, p.name as patient_name, d.name as doctor_name, d.specialization
        FROM appointments a
        JOIN patients p ON a.patient_id = p.id
        JOIN doctors d ON a.doctor_id = d.id
        WHERE a.id = ?
    ''', (appointment_id,)).fetchone()
    conn.close()
    
    if appointment:
        return render_template('appointment_success.html', 
                             appointment=appointment,
                             appointment_id=appointment_id)
    else:
        flash('Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn!', 'error')
        return redirect(url_for('public_appointment'))

# ==================== ROUTES SAU ƒêƒÇNG NH·∫¨P ====================

@app.route('/home')
@login_required
def home():
    """Trang ch·ªß sau khi ƒëƒÉng nh·∫≠p - ph√¢n theo role"""
    if current_user.role == 'patient':
        return redirect(url_for('patient_dashboard'))
    else:
        # L·∫•y d·ªØ li·ªáu th·ªëng k√™ cho admin/receptionist
        conn = get_db_connection()
        
        total_patients = conn.execute('SELECT COUNT(*) FROM patients').fetchone()[0]
        total_doctors = conn.execute('SELECT COUNT(*) FROM doctors').fetchone()[0]
        total_appointments = conn.execute('SELECT COUNT(*) FROM appointments').fetchone()[0]
        
        # L·∫•y l·ªãch h·∫πn g·∫ßn ƒë√¢y
        recent_appointments = conn.execute('''
            SELECT a.*, p.name as patient_name, d.name as doctor_name 
            FROM appointments a
            JOIN patients p ON a.patient_id = p.id
            JOIN doctors d ON a.doctor_id = d.id
            ORDER BY a.created_at DESC LIMIT 5
        ''').fetchall()
        
        conn.close()
        
        return render_template('home.html', 
                             total_patients=total_patients,
                             total_doctors=total_doctors,
                             total_appointments=total_appointments,
                             recent_appointments=recent_appointments)

@app.route('/patient/dashboard')
@patient_required
def patient_dashboard():
    """Dashboard d√†nh cho b·ªánh nh√¢n"""
    conn = get_db_connection()
    
    # L·∫•y th√¥ng tin b·ªánh nh√¢n
    patient = conn.execute('''
        SELECT p.* FROM patients p 
        WHERE p.user_id = ?
    ''', (current_user.id,)).fetchone()
    
    if not patient:
        # N·∫øu ch∆∞a c√≥ patient record, t·∫°o m·ªõi
        user_info = conn.execute('SELECT name, phone, email FROM users WHERE id = ?', (current_user.id,)).fetchone()
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO patients (name, phone, email, user_id)
            VALUES (?, ?, ?, ?)
        ''', (user_info['name'], user_info['phone'], user_info['email'], current_user.id))
        patient_id = cursor.lastrowid
        conn.commit()
        patient = conn.execute('SELECT * FROM patients WHERE id = ?', (patient_id,)).fetchone()
    
    # L·∫•y l·ªãch s·ª≠ l·ªãch h·∫πn
    appointments = conn.execute('''
        SELECT a.*, d.name as doctor_name, d.specialization
        FROM appointments a
        JOIN doctors d ON a.doctor_id = d.id
        WHERE a.patient_id = ?
        ORDER BY a.appointment_date DESC, a.appointment_time DESC
    ''', (patient['id'],)).fetchall()
    
    doctors = conn.execute('SELECT * FROM doctors ORDER BY name').fetchall()
    conn.close()
    
    return render_template('patient_dashboard.html', 
                         patient=patient, 
                         appointments=appointments, 
                         doctors=doctors,
                         today=datetime.now().strftime('%Y-%m-%d'))

@app.route('/patient/book_appointment', methods=['POST'])
@patient_required
def patient_book_appointment():
    """B·ªánh nh√¢n ƒë·∫∑t l·ªãch h·∫πn - G·ª¨I EMAIL V·ªÄ EMAIL ƒê√É ƒêƒÇNG K√ù"""
    data = request.get_json()
    conn = get_db_connection()
    
    try:
        # L·∫•y patient_id t·ª´ user_id
        patient = conn.execute('SELECT id, name, email FROM patients WHERE user_id = ?', (current_user.id,)).fetchone()
        
        if not patient:
            return jsonify({'success': False, 'message': 'Kh√¥ng t√¨m th·∫•y th√¥ng tin b·ªánh nh√¢n'})
        
        # T·∫°o l·ªãch h·∫πn
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO appointments (patient_id, doctor_id, appointment_date, appointment_time, status, notes)
            VALUES (?, ?, ?, ?, 'Scheduled', ?)
        ''', (patient['id'], data['doctor_id'], data['date'], data['time'], data.get('notes', '')))
        
        appointment_id = cursor.lastrowid
        
        # L·∫•y th√¥ng tin b√°c sƒ©
        doctor = conn.execute('SELECT name, specialization FROM doctors WHERE id = ?', (data['doctor_id'],)).fetchone()
        
        # G·ª¨I EMAIL V·ªÄ EMAIL ƒê√É ƒêƒÇNG K√ù C·ª¶A B·ªÜNH NH√ÇN
        if patient['email']:
            print(f"üìß ƒêang g·ª≠i email x√°c nh·∫≠n ƒë·∫øn: {patient['email']}")
            email_sent = send_appointment_email(
                patient['email'], 
                patient['name'], 
                doctor['name'], 
                data['date'], 
                data['time'], 
                appointment_id
            )
            if email_sent:
                print(f"‚úÖ ƒê√£ g·ª≠i email x√°c nh·∫≠n th√†nh c√¥ng!")
            else:
                print(f"‚ùå G·ª≠i email th·∫•t b·∫°i!")
        else:
            print("‚ö†Ô∏è B·ªánh nh√¢n kh√¥ng c√≥ email ƒë·ªÉ g·ª≠i x√°c nh·∫≠n")
        
        conn.commit()
        conn.close()
        
        return jsonify({'success': True, 'message': 'ƒê·∫∑t l·ªãch h·∫πn th√†nh c√¥ng! Email x√°c nh·∫≠n ƒë√£ ƒë∆∞·ª£c g·ª≠i.'})
        
    except Exception as e:
        conn.rollback()
        conn.close()
        return jsonify({'success': False, 'message': f'L·ªói: {str(e)}'})

# ==================== ROUTES M·ªöI CHO B·ªÜNH NH√ÇN ====================

@app.route('/patient/update_appointment', methods=['POST'])
@patient_required
def patient_update_appointment():
    """B·ªánh nh√¢n c·∫≠p nh·∫≠t l·ªãch h·∫πn"""
    data = request.get_json()
    conn = get_db_connection()
    
    try:
        # Ki·ªÉm tra xem l·ªãch h·∫πn c√≥ thu·ªôc v·ªÅ b·ªánh nh√¢n n√†y kh√¥ng
        appointment = conn.execute('''
            SELECT a.*, p.user_id 
            FROM appointments a 
            JOIN patients p ON a.patient_id = p.id 
            WHERE a.id = ? AND p.user_id = ?
        ''', (data['appointment_id'], current_user.id)).fetchone()
        
        if not appointment:
            return jsonify({'success': False, 'message': 'Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn!'})
        
        # Ki·ªÉm tra tr·∫°ng th√°i l·ªãch h·∫πn
        if appointment['status'] not in ['Scheduled', 'Confirmed']:
            return jsonify({'success': False, 'message': 'Kh√¥ng th·ªÉ ch·ªânh s·ª≠a l·ªãch h·∫πn n√†y!'})
        
        # C·∫≠p nh·∫≠t l·ªãch h·∫πn
        conn.execute('''
            UPDATE appointments 
            SET appointment_date = ?, appointment_time = ?, notes = ?
            WHERE id = ?
        ''', (data['date'], data['time'], data['notes'], data['appointment_id']))
        
        conn.commit()
        conn.close()
        
        return jsonify({'success': True, 'message': 'C·∫≠p nh·∫≠t l·ªãch h·∫πn th√†nh c√¥ng!'})
        
    except Exception as e:
        conn.close()
        return jsonify({'success': False, 'message': f'L·ªói: {str(e)}'})

@app.route('/patient/cancel_appointment/<int:appointment_id>')
@patient_required
def patient_cancel_appointment(appointment_id):
    """B·ªánh nh√¢n h·ªßy l·ªãch h·∫πn"""
    conn = get_db_connection()
    
    try:
        # Ki·ªÉm tra xem l·ªãch h·∫πn c√≥ thu·ªôc v·ªÅ b·ªánh nh√¢n n√†y kh√¥ng
        appointment = conn.execute('''
            SELECT a.*, p.user_id 
            FROM appointments a 
            JOIN patients p ON a.patient_id = p.id 
            WHERE a.id = ? AND p.user_id = ?
        ''', (appointment_id, current_user.id)).fetchone()
        
        if not appointment:
            return jsonify({'success': False, 'message': 'Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn!'})
        
        # Ki·ªÉm tra tr·∫°ng th√°i l·ªãch h·∫πn
        if appointment['status'] not in ['Scheduled', 'Confirmed']:
            return jsonify({'success': False, 'message': 'Kh√¥ng th·ªÉ h·ªßy l·ªãch h·∫πn n√†y!'})
        
        # H·ªßy l·ªãch h·∫πn
        conn.execute('''
            UPDATE appointments 
            SET status = 'Cancelled'
            WHERE id = ?
        ''', (appointment_id,))
        
        conn.commit()
        conn.close()
        
        return jsonify({'success': True, 'message': 'H·ªßy l·ªãch h·∫πn th√†nh c√¥ng!'})
        
    except Exception as e:
        conn.close()
        return jsonify({'success': False, 'message': f'L·ªói: {str(e)}'})

@app.route('/patient/update_info', methods=['POST'])
@patient_required
def patient_update_info():
    """B·ªánh nh√¢n c·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n"""
    data = request.get_json()
    conn = get_db_connection()
    
    try:
        # C·∫≠p nh·∫≠t th√¥ng tin b·ªánh nh√¢n
        conn.execute('''
            UPDATE patients 
            SET name = ?, phone = ?, email = ?, address = ?, date_of_birth = ?, gender = ?
            WHERE user_id = ?
        ''', (data['name'], data['phone'], data['email'], data['address'], 
              data['date_of_birth'], data['gender'], current_user.id))
        
        # C·∫≠p nh·∫≠t th√¥ng tin user
        conn.execute('''
            UPDATE users 
            SET name = ?, phone = ?, email = ?
            WHERE id = ?
        ''', (data['name'], data['phone'], data['email'], current_user.id))
        
        conn.commit()
        conn.close()
        
        return jsonify({'success': True, 'message': 'C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!'})
        
    except Exception as e:
        conn.close()
        return jsonify({'success': False, 'message': f'L·ªói: {str(e)}'})

# ==================== ROUTES QU·∫¢N L√ù (STAFF) ====================

@app.route('/patients')
@staff_required
def patients():
    """Qu·∫£n l√Ω b·ªánh nh√¢n - ch·ªâ staff"""
    conn = get_db_connection()
    patients_data = conn.execute('SELECT * FROM patients ORDER BY created_at DESC').fetchall()
    
    patients_with_appointments = []
    for patient in patients_data:
        appointments = conn.execute('''
            SELECT a.*, d.name as doctor_name 
            FROM appointments a 
            JOIN doctors d ON a.doctor_id = d.id 
            WHERE a.patient_id = ? 
            ORDER BY a.appointment_date DESC
        ''', (patient['id'],)).fetchall()
        patients_with_appointments.append({
            **dict(patient), 
            'appointments': appointments
        })
    
    conn.close()
    return render_template('patients.html', patients=patients_with_appointments)

@app.route('/add_patient', methods=['POST'])
@staff_required
def add_patient():
    """Th√™m b·ªánh nh√¢n - ch·ªâ staff"""
    data = request.get_json()
    conn = get_db_connection()
    try:
        conn.execute('''
            INSERT INTO patients (name, phone, email, address, date_of_birth, gender)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (data['name'], data['phone'], data['email'], data['address'], data['dob'], data['gender']))
        conn.commit()
        conn.close()
        return jsonify({'success': True, 'message': 'Th√™m b·ªánh nh√¢n th√†nh c√¥ng!'})
    except Exception as e:
        conn.close()
        return jsonify({'success': False, 'message': f'L·ªói: {str(e)}'})

@app.route('/delete_patient/<int:patient_id>')
@staff_required
def delete_patient(patient_id):
    """X√≥a b·ªánh nh√¢n - ch·ªâ staff"""
    conn = get_db_connection()
    try:
        # Ki·ªÉm tra xem b·ªánh nh√¢n c√≥ l·ªãch h·∫πn kh√¥ng
        appointments = conn.execute('SELECT COUNT(*) FROM appointments WHERE patient_id = ?', (patient_id,)).fetchone()[0]
        if appointments > 0:
            return jsonify({'success': False, 'message': 'Kh√¥ng th·ªÉ x√≥a b·ªánh nh√¢n ƒë√£ c√≥ l·ªãch h·∫πn!'})
        
        conn.execute('DELETE FROM patients WHERE id = ?', (patient_id,))
        conn.commit()
        conn.close()
        return jsonify({'success': True, 'message': 'X√≥a b·ªánh nh√¢n th√†nh c√¥ng!'})
    except Exception as e:
        conn.close()
        return jsonify({'success': False, 'message': f'L·ªói: {str(e)}'})

@app.route('/doctors')
@staff_required
def doctors():
    """Qu·∫£n l√Ω b√°c sƒ© - ch·ªâ staff"""
    conn = get_db_connection()
    doctors = conn.execute('SELECT * FROM doctors ORDER BY name').fetchall()
    conn.close()
    return render_template('doctors.html', doctors=doctors)

@app.route('/add_doctor', methods=['POST'])
@staff_required
def add_doctor():
    """Th√™m b√°c sƒ© - ch·ªâ staff"""
    data = request.get_json()
    conn = get_db_connection()
    try:
        conn.execute('''
            INSERT INTO doctors (name, specialization, phone, email, available_days, available_time)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (data['name'], data['specialization'], data['phone'], data['email'], data['days'], data['time']))
        conn.commit()
        conn.close()
        return jsonify({'success': True, 'message': 'Th√™m b√°c sƒ© th√†nh c√¥ng!'})
    except Exception as e:
        conn.close()
        return jsonify({'success': False, 'message': f'L·ªói: {str(e)}'})

@app.route('/delete_doctor/<int:doctor_id>')
@staff_required
def delete_doctor(doctor_id):
    """X√≥a b√°c sƒ© - ch·ªâ staff"""
    conn = get_db_connection()
    try:
        # Ki·ªÉm tra xem b√°c sƒ© c√≥ l·ªãch h·∫πn kh√¥ng
        appointments = conn.execute('SELECT COUNT(*) FROM appointments WHERE doctor_id = ?', (doctor_id,)).fetchone()[0]
        if appointments > 0:
            return jsonify({'success': False, 'message': 'Kh√¥ng th·ªÉ x√≥a b√°c sƒ© ƒë√£ c√≥ l·ªãch h·∫πn!'})
        
        conn.execute('DELETE FROM doctors WHERE id = ?', (doctor_id,))
        conn.commit()
        conn.close()
        return jsonify({'success': True, 'message': 'X√≥a b√°c sƒ© th√†nh c√¥ng!'})
    except Exception as e:
        conn.close()
        return jsonify({'success': False, 'message': f'L·ªói: {str(e)}'})

@app.route('/appointments')
@staff_required
def appointments():
    """Qu·∫£n l√Ω l·ªãch h·∫πn - ch·ªâ staff"""
    conn = get_db_connection()
    appointments = conn.execute('''
        SELECT a.*, p.name as patient_name, p.phone as patient_phone, d.name as doctor_name, d.specialization
        FROM appointments a
        JOIN patients p ON a.patient_id = p.id
        JOIN doctors d ON a.doctor_id = d.id
        ORDER BY a.appointment_date DESC, a.appointment_time DESC
    ''').fetchall()
    
    patients = conn.execute('SELECT id, name, phone FROM patients').fetchall()
    doctors = conn.execute('SELECT * FROM doctors').fetchall()
    conn.close()
    
    return render_template('appointments.html', 
                         appointments=appointments, 
                         patients=patients, 
                         doctors=doctors)

@app.route('/add_appointment', methods=['POST'])
@staff_required
def add_appointment():
    """Th√™m l·ªãch h·∫πn - ch·ªâ staff"""
    data = request.get_json()
    conn = get_db_connection()
    try:
        patient_id = data.get('patient_id')
        
        # N·∫øu l√† b·ªánh nh√¢n m·ªõi
        if not patient_id and 'new_patient' in data:
            new_patient = data['new_patient']
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO patients (name, phone, email, created_at)
                VALUES (?, ?, ?, datetime('now'))
            ''', (new_patient['name'], new_patient['phone'], new_patient.get('email')))
            patient_id = cursor.lastrowid
        
        # T·∫°o l·ªãch h·∫πn
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO appointments (patient_id, doctor_id, appointment_date, appointment_time, status, notes)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (patient_id, data['doctor_id'], data['date'], data['time'], data['status'], data['notes']))
        
        appointment_id = cursor.lastrowid
        
        # L·∫•y th√¥ng tin b·ªánh nh√¢n v√† b√°c sƒ© ƒë·ªÉ g·ª≠i email
        patient = conn.execute('SELECT name, email FROM patients WHERE id = ?', (patient_id,)).fetchone()
        doctor = conn.execute('SELECT name FROM doctors WHERE id = ?', (data['doctor_id'],)).fetchone()
        
        # G·ª≠i email x√°c nh·∫≠n n·∫øu b·ªánh nh√¢n c√≥ email
        if patient and patient['email']:
            print(f"üìß ƒêang g·ª≠i email x√°c nh·∫≠n ƒë·∫øn: {patient['email']}")
            email_sent = send_appointment_email(
                patient['email'], 
                patient['name'], 
                doctor['name'], 
                data['date'], 
                data['time'], 
                appointment_id
            )
            if email_sent:
                print(f"‚úÖ ƒê√£ g·ª≠i email x√°c nh·∫≠n th√†nh c√¥ng!")
            else:
                print(f"‚ùå G·ª≠i email th·∫•t b·∫°i!")
        
        conn.commit()
        conn.close()
        return jsonify({'success': True, 'message': 'ƒê·∫∑t l·ªãch h·∫πn th√†nh c√¥ng!'})
    except Exception as e:
        conn.rollback()
        conn.close()
        return jsonify({'success': False, 'message': f'L·ªói: {str(e)}'})

@app.route('/update_appointment_status', methods=['POST'])
@staff_required
def update_appointment_status():
    """C·∫≠p nh·∫≠t tr·∫°ng th√°i l·ªãch h·∫πn - ch·ªâ staff"""
    data = request.get_json()
    conn = get_db_connection()
    try:
        conn.execute('''
            UPDATE appointments SET status = ? WHERE id = ?
        ''', (data['status'], data['appointment_id']))
        conn.commit()
        conn.close()
        return jsonify({'success': True, 'message': 'C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng!'})
    except Exception as e:
        conn.close()
        return jsonify({'success': False, 'message': f'L·ªói: {str(e)}'})

@app.route('/delete_appointment/<int:appointment_id>')
@staff_required
def delete_appointment(appointment_id):
    """X√≥a l·ªãch h·∫πn - ch·ªâ staff"""
    conn = get_db_connection()
    try:
        conn.execute('DELETE FROM appointments WHERE id = ?', (appointment_id,))
        conn.commit()
        conn.close()
        return jsonify({'success': True, 'message': 'X√≥a l·ªãch h·∫πn th√†nh c√¥ng!'})
    except Exception as e:
        conn.close()
        return jsonify({'success': False, 'message': f'L·ªói: {str(e)}'})

# ==================== ROUTES QU·∫¢N TR·ªä (ADMIN ONLY) ====================

@app.route('/users')
@admin_required
def users():
    """Qu·∫£n l√Ω ng∆∞·ªùi d√πng - ch·ªâ admin"""
    conn = get_db_connection()
    users = conn.execute('SELECT * FROM users ORDER BY created_at DESC').fetchall()
    conn.close()
    return render_template('users.html', users=users)

# ==================== DASHBOARD DATA ====================

@app.route('/dashboard_data')
@login_required
def dashboard_data():
    """D·ªØ li·ªáu dashboard - cho t·∫•t c·∫£ user ƒë√£ ƒëƒÉng nh·∫≠p"""
    conn = get_db_connection()
    
    total_patients = conn.execute('SELECT COUNT(*) FROM patients').fetchone()[0]
    total_doctors = conn.execute('SELECT COUNT(*) FROM doctors').fetchone()[0]
    total_appointments = conn.execute('SELECT COUNT(*) FROM appointments').fetchone()[0]
    today_appointments = conn.execute('''
        SELECT COUNT(*) FROM appointments 
        WHERE appointment_date = date('now')
    ''').fetchone()[0]
    
    recent_appointments = conn.execute('''
        SELECT a.*, p.name as patient_name, d.name as doctor_name 
        FROM appointments a
        JOIN patients p ON a.patient_id = p.id
        JOIN doctors d ON a.doctor_id = d.id
        ORDER BY a.created_at DESC LIMIT 5
    ''').fetchall()
    
    conn.close()
    
    return jsonify({
        'total_patients': total_patients,
        'total_doctors': total_doctors,
        'total_appointments': total_appointments,
        'today_appointments': today_appointments,
        'recent_appointments': [
            {
                'id': app['id'],
                'patient_name': app['patient_name'],
                'doctor_name': app['doctor_name'],
                'date': app['appointment_date'],
                'time': app['appointment_time'],
                'status': app['status']
            }
            for app in recent_appointments
        ]
    })

# ==================== UTILITY FUNCTIONS ====================

def send_appointment_email(patient_email, patient_name, doctor_name, date, time, appointment_id):
    """G·ª≠i email x√°c nh·∫≠n l·ªãch h·∫πn"""
    try:
        # Ki·ªÉm tra email c√≥ h·ª£p l·ªá kh√¥ng
        if not patient_email or '@' not in patient_email:
            print(f"‚ùå Email kh√¥ng h·ª£p l·ªá: {patient_email}")
            return False
            
        subject = f"X√°c nh·∫≠n l·ªãch h·∫πn kh√°m b·ªánh - M√£ #{appointment_id}"
        
        # Format ng√†y gi·ªù ƒë·∫πp h∆°n
        appointment_date = datetime.strptime(date, '%Y-%m-%d').strftime('%d/%m/%Y')
        
        html_body = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <style>
                body {{ 
                    font-family: 'Arial', sans-serif; 
                    line-height: 1.6; 
                    color: #333; 
                    margin: 0;
                    padding: 0;
                }}
                .container {{ 
                    max-width: 600px; 
                    margin: 0 auto; 
                    padding: 20px;
                    background: #f9f9f9;
                }}
                .header {{ 
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                    color: white; 
                    padding: 30px; 
                    text-align: center; 
                    border-radius: 10px 10px 0 0; 
                }}
                .content {{ 
                    padding: 30px; 
                    background: white;
                    border-radius: 0 0 10px 10px;
                    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                }}
                .info {{ 
                    background: #f8f9fa; 
                    padding: 20px; 
                    margin: 20px 0; 
                    border-radius: 8px; 
                    border-left: 4px solid #667eea;
                }}
                .footer {{ 
                    text-align: center; 
                    margin-top: 30px; 
                    padding: 20px; 
                    color: #666;
                    font-size: 14px;
                }}
                .success-badge {{
                    background: #28a745;
                    color: white;
                    padding: 5px 10px;
                    border-radius: 20px;
                    font-size: 14px;
                    font-weight: bold;
                }}
                ul {{
                    padding-left: 20px;
                }}
                li {{
                    margin-bottom: 8px;
                }}
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>üè• MEDICAL APPOINTMENT</h1>
                    <p>H·ªá th·ªëng ƒë·∫∑t l·ªãch kh√°m b·ªánh tr·ª±c tuy·∫øn</p>
                </div>
                <div class="content">
                    <h2>X√ÅC NH·∫¨N L·ªäCH H·∫∏N TH√ÄNH C√îNG</h2>
                    
                    <p>K√≠nh ch√†o <strong>{patient_name}</strong>,</p>
                    <p>C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω l·ªãch h·∫πn kh√°m b·ªánh t·∫°i Ph√≤ng kh√°m MEDICAL.</p>
                    
                    <div class="info">
                        <h3>üìã TH√îNG TIN L·ªäCH H·∫∏N</h3>
                        <p><strong>M√£ l·ªãch h·∫πn:</strong> <span style="color: #667eea; font-weight: bold; font-size: 18px;">#{appointment_id}</span></p>
                        <p><strong>B√°c sƒ©:</strong> {doctor_name}</p>
                        <p><strong>Ng√†y h·∫πn:</strong> {appointment_date}</p>
                        <p><strong>Gi·ªù h·∫πn:</strong> {time}</p>
                        <p><strong>Tr·∫°ng th√°i:</strong> <span class="success-badge">ƒê√É X√ÅC NH·∫¨N</span></p>
                    </div>
                    
                    <div class="info">
                        <h3>üìù H∆Ø·ªöNG D·∫™N & L∆ØU √ù</h3>
                        <ul>
                            <li>‚è∞ <strong>Vui l√≤ng c√≥ m·∫∑t tr∆∞·ªõc 15 ph√∫t</strong> ƒë·ªÉ l√†m th·ªß t·ª•c</li>
                            <li>üÜî <strong>Mang theo CMND/CCCD</strong> v√† th·∫ª BHYT (n·∫øu c√≥)</li>
                            <li>üí∞ Chu·∫©n b·ªã ph√≠ kh√°m b·ªánh theo quy ƒë·ªãnh</li>
                            <li>üìû <strong>Hotline h·ªó tr·ª£: 1900-1234</strong> (7:00-20:00)</li>
                            <li>üìç <strong>ƒê·ªãa ch·ªâ:</strong> 123 Nguy·ªÖn Tr√£i, Qu·∫≠n 1, TP.HCM</li>
                            <li>üîÑ N·∫øu kh√¥ng th·ªÉ ƒë·∫øn, vui l√≤ng h·ªßy l·ªãch tr∆∞·ªõc 24h</li>
                        </ul>
                    </div>
                    
                    <div style="background: #fff3cd; padding: 15px; border-radius: 5px; border-left: 4px solid #ffc107;">
                        <h4 style="color: #856404; margin-top: 0;">üí° L·ªùi khuy√™n s·ª©c kh·ªèe</h4>
                        <p style="margin-bottom: 0;">Ngh·ªâ ng∆°i ƒë·∫ßy ƒë·ªß, u·ªëng ƒë·ªß n∆∞·ªõc v√† ƒÉn nh·∫π tr∆∞·ªõc khi kh√°m b·ªánh.</p>
                    </div>
                    
                    <p style="margin-top: 30px;">Tr√¢n tr·ªçng,<br>
                    <strong>ƒê·ªôi ng≈© Ph√≤ng kh√°m ƒêa khoa MEDICAL</strong><br>
                    <em>"V√¨ s·ª©c kh·ªèe c·ªông ƒë·ªìng"</em></p>
                </div>
                <div class="footer">
                    <p>¬© 2024 Ph√≤ng kh√°m ƒêa khoa MEDICAL. All rights reserved.</p>
                    <p>Hotline: 1900-1234 | Email: info@medical.com | Website: www.medical.com</p>
                    <p><em>ƒê√¢y l√† email t·ª± ƒë·ªông, vui l√≤ng kh√¥ng tr·∫£ l·ªùi.</em></p>
                </div>
            </div>
        </body>
        </html>
        """
        
        msg = Message(
            subject=subject,
            recipients=[patient_email],
            html=html_body
        )
        
        mail.send(msg)
        print(f"‚úÖ ƒê√£ g·ª≠i email x√°c nh·∫≠n th√†nh c√¥ng ƒë·∫øn: {patient_email}")
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói g·ª≠i email ƒë·∫øn {patient_email}: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

@app.route('/test-email-detailed')
def test_email_detailed():
    """Route test g·ª≠i email chi ti·∫øt"""
    try:
        test_email = "anhnguyen0934422067@gmail.com"  # Thay b·∫±ng email th·∫≠t c·ªßa b·∫°n ƒë·ªÉ test
        
        # Test v·ªõi d·ªØ li·ªáu m·∫´u
        email_sent = send_appointment_email(
            test_email, 
            "Nguy·ªÖn VƒÉn Test", 
            "BS. Nguy·ªÖn VƒÉn A - Khoa N·ªôi", 
            "2024-12-25", 
            "14:30", 
            999
        )
        
        if email_sent:
            return f'''
            <h1>‚úÖ Email sent successfully!</h1>
            <p>Check your email: <strong>{test_email}</strong></p>
            <p>Check spam folder if not in inbox.</p>
            <a href="/" class="btn btn-primary">Back to Home</a>
            '''
        else:
            return f'''
            <h1>‚ùå Failed to send email</h1>
            <p>Could not send to: <strong>{test_email}</strong></p>
            <p>Check your email configuration and try again.</p>
            <a href="/" class="btn btn-primary">Back to Home</a>
            '''
            
    except Exception as e:
        return f'''
        <h1>‚ùå Error in test</h1>
        <p>Error: {str(e)}</p>
        <p>Check your email configuration in app.py</p>
        <a href="/" class="btn btn-primary">Back to Home</a>
        '''

@app.route('/logout')
@login_required
def logout():
    logout_user()
    flash('ƒê√£ ƒëƒÉng xu·∫•t th√†nh c√¥ng!', 'success')
    return redirect(url_for('index'))

if __name__ == '__main__':
    # CH·ªà T·∫†O DATABASE M·ªöI N·∫æU CH∆ØA T·ªíN T·∫†I - KH√îNG X√ìA DATABASE C≈®
    if not os.path.exists(DATABASE):
        print("üì¶ ƒêang kh·ªüi t·∫°o database m·ªõi...")
        init_db()
    else:
        print("‚úÖ ƒêang s·ª≠ d·ª•ng database hi·ªán c√≥:", DATABASE)
    
    check_users()  # Ki·ªÉm tra users trong database
    print("üöÄ Starting Flask application...")
    print("üè† Trang ch·ªß: http://localhost:5000")
    print("üîê ƒêƒÉng k√Ω: http://localhost:5000/register") 
    print("üîê ƒêƒÉng nh·∫≠p: http://localhost:5000/login")
    print("üìß Email test: http://localhost:5000/test-email-detailed")
    print("üåê Public appointment: http://localhost:5000/public/appointment")
    print("üë®‚Äçüíº Admin: admin/admin123")
    print("üë©‚Äçüíº Reception: reception/reception123")
    print("üíæ Database file:", DATABASE)
    app.run(debug=True, host='0.0.0.0', port=5000)